name: Release

on:
  push:
    tags: 
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a prerelease?'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  packages: write

env:
  DOTNET_NOLOGO: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  release:
    name: Build & Publish
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
          IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
        else
          VERSION="${GITHUB_REF#refs/tags/v}"
          IS_PRERELEASE="false"
          if [[ "$VERSION" == *"alpha"* ]] || [[ "$VERSION" == *"beta"* ]] || [[ "$VERSION" == *"rc"* ]]; then
            IS_PRERELEASE="true"
          fi
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
        echo "Is Prerelease: $IS_PRERELEASE"
    
    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.props') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build solution
      run: |
        dotnet build --configuration Release --no-restore \
          -p:VersionPrefix=${{ steps.version.outputs.version }} \
          -p:VersionSuffix="" \
          --verbosity minimal
    
    - name: Run tests
      run: dotnet test --configuration Release --no-build --verbosity minimal
    
    - name: Create NuGet packages
      run: |
        dotnet pack --configuration Release --no-build --output ./packages \
          -p:VersionPrefix=${{ steps.version.outputs.version }} \
          -p:VersionSuffix="" \
          --verbosity minimal
    
    - name: List packages
      run: ls -la ./packages/
    
    - name: Publish to NuGet.org
      run: |
        dotnet nuget push "./packages/*.nupkg" \
          --api-key ${{ secrets.NUGET_API_KEY }} \
          --source https://api.nuget.org/v3/index.json \
          --skip-duplicate \
          --no-symbols
    
    - name: Publish symbols to NuGet.org
      run: |
        dotnet nuget push "./packages/*.snupkg" \
          --api-key ${{ secrets.NUGET_API_KEY }} \
          --source https://api.nuget.org/v3/index.json \
          --skip-duplicate
      continue-on-error: true
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: Release v${{ steps.version.outputs.version }}
        prerelease: ${{ steps.version.outputs.is_prerelease }}
        generate_release_notes: true
        files: |
          ./packages/*.nupkg
          ./packages/*.snupkg
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-github-packages:
    name: Publish to GitHub Packages
    runs-on: ubuntu-latest
    needs: release
    if: success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Add GitHub Packages source
      run: |
        dotnet nuget add source \
          --username ${{ github.actor }} \
          --password ${{ secrets.GITHUB_TOKEN }} \
          --store-password-in-clear-text \
          --name github \
          "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
    
    - name: Restore and build
      run: |
        dotnet restore
        dotnet build --configuration Release --no-restore \
          -p:VersionPrefix=${{ needs.release.outputs.version || '0.0.1' }} \
          -p:VersionSuffix=""
    
    - name: Create and publish to GitHub Packages
      run: |
        dotnet pack --configuration Release --no-build --output ./packages-gh \
          -p:VersionPrefix=${{ needs.release.outputs.version || '0.0.1' }} \
          -p:VersionSuffix=""
        dotnet nuget push "./packages-gh/*.nupkg" \
          --source "github" \
          --skip-duplicate 